swagger: '2.0'
info:
  title: Finder API
  version: '1.1.0'
host: 'localhost:5000'
basePath: '/'
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /ping:
    get:
      summary: Check MongoDB connection
      description: Pings the MongoDB server to check connectivity.
      responses:
        200:
          description: Successfully connected to MongoDB.
        500:
          description: Error occurred.

  /users:
    get:
      summary: Get all users
      description: Retrieves a list of all users. Optionally, a specific user can be retrieved by providing a user ID.
      parameters:
        - in: query
          name: user_id
          required: false
          type: string
          description: The user's ID.
      responses:
        200:
          description: A list of users or a specific user if user_id is provided.
        400:
          description: Invalid user_id format.
        404:
          description: User not found.
        500:
          description: Error occurred.

  /users/login:
    post:
      summary: User login
      description: Check if a user exists based on name and surname.
      parameters:
        - in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/UserLogin'
      responses:
        200:
          description: User found and returned.
        401:
          description: User not found.
        500:
          description: Error occurred.

  /users/signup:
    post:
      summary: User signup
      description: Create a new user.
      parameters:
        - in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: User created successfully.
        400:
          description: Invalid request body.
        409:
          description: User already exists.
        500:
          description: Error occurred.

  /users/update:
    put:
      summary: Update a user
      description: Updates an existing user's details.
      parameters:
        - in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/UserUpdate'
      responses:
        200:
          description: User updated successfully.
        400:
          description: Invalid request body.
        404:
          description: User not found.
        409:
          description: Another user with the same name and surname exists.
        500:
          description: Error occurred.

  /users/update-bar:
    post:
      summary: Update a user's bar
      description: Updates a user's associated bar.
      parameters:
        - in: body
          name: userBar
          required: true
          schema:
            $ref: '#/definitions/UserBarUpdate'
      responses:
        200:
          description: User bar updated successfully.
        400:
          description: Invalid request body or user ID.
        404:
          description: User not found.
        500:
          description: Error occurred.

  /bars:
    get:
      summary: Get all bars
      description: Retrieves a list of all bars. Optionally, a specific bar can be retrieved by providing a bar ID.
      parameters:
        - in: query
          name: _id
          required: false
          type: string
          description: The bar's ID.
      responses:
        200:
          description: A list of bars or a specific bar if _id is provided.
        400:
          description: Invalid _id format.
        500:
          description: Error occurred.

  /bars/users:
    get:
      summary: Get all bars with their corresponding users
      description: Retrieves all bars and the users in them, if any.
      parameters:
        - in: query
          name: _id
          required: false
          type: string
          description: The bar's ID to filter.
      responses:
        200:
          description: A list of bars with their corresponding users.
        404:
          description: Bar not found.
        500:
          description: Error occurred.

definitions:
  User:
    type: object
    properties:
      name:
        type: string
      surname:
        type: string
      company:
        type: string
      bio:
        type: string
      photo:
        type: string
      gender:
        type: string
      bar_id:
        type: string

  UserLogin:
    type: object
    properties:
      name:
        type: string
      surname:
        type: string

  UserUpdate:
    type: object
    properties:
      user_id:
        type: string
      name:
        type: string
      surname:
        type: string
      company:
        type: string
      bio:
        type: string
      photo:
        type: string
      gender:
        type: string
      bar_id:
        type: string

  UserBarUpdate:
    type: object
    properties:
      user_id:
        type: string
      new_bar_id:
        type: string

  Bar:
    type: object
    properties:
      name:
        type: string
      longitude:
        type: string
      latitude:
        type: string
      capacity:
        type: string
      type:
        type: string
      description:
        type: string
